openapi: 3.0.0
info:
  title: Pragma assessment 2024-1
  description: Pragma assessment 2024-1
  version: 1.0.0
tags:
  - name: "api-gateway"
    description: "API assessment"
paths:
  /core/v1/client/auto-register:
    post:
      operationId: "PostClientAutoRegister"
      summary: "La funcionalidad de esta API es la creación de un nuevo cliente por autoservicio"
      description: "Se envía la comunicación síncrona al microservicio de clientes donde valida si el usuario ya existe y en caso contrario, lo crea, esto aplicando una capa de integración que redirecciona al microservicio correspondiente"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        "201":
          description: "User created successfully"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUserResponse"
        "409":
          description: "User registered already"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedCreateUserResponse"

      x-amazon-apigateway-integration:
        httpMethod: POST
        credentials:
          Fn::Sub:
            - arn:aws:iam::${AWSAccountId}:role/ROLE_PRAGMA_ASSESSMENT_API_CLIENTS
            - AWSAccountId:
                Ref: AWS::AccountId
        uri:
          Fn::Sub:
            - arn:${AWSPartition}:apigateway:${AWSRegion}:lambda:path/2015-03-31/functions/arn:${AWSPartition}:lambda:${AWSRegion}:${AWSAccountId}:function:LAMBDA_PRAGMA_ASSESS_API_REGISTER_CLIENT/invocations
            - AWSPartition:
                Ref: AWS::Partition
              AWSRegion:
                Ref: AWS::Region
              AWSAccountId:
                Ref: AWS::AccountId
        type: aws_proxy
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
        timeoutInMillis: 29000
        responses:
          default:
            statusCode: "200"

      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
        allowMethods:
          - POST
        allowHeaders:
          - "Content-Type"
        maxAge: 300
  /core/v1/client/modify:
    patch:
      operationId: "PatchClientByComercial"
      summary: "La funcionalidad de esta API es la modificación de un nuevo cliente por parte del comercial que lo atiende"
      description: "Se envía la comunicación síncrona al microservicio de clientes donde valida si el usuario ya existe y en caso de ya existir, lo modifica, en caso contrario, solicita su creación por el endpoint de auto-register"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModifyUserRequest"
      responses:
        "201":
          description: "User created successfully"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModifyUserResponse"
      x-amazon-apigateway-integration:
        httpMethod: POST
        credentials:
          Fn::Sub:
            - arn:aws:iam::${AWSAccountId}:role/ROLE_PRAGMA_ASSESSMENT_API_CLIENTS
            - AWSAccountId:
                Ref: AWS::AccountId
        uri:
          Fn::Sub:
            - arn:${AWSPartition}:apigateway:${AWSRegion}:lambda:path/2015-03-31/functions/arn:${AWSPartition}:lambda:${AWSRegion}:${AWSAccountId}:function:LAMBDA_PRAGMA_ASSESS_API_MODIFY_CLIENT/invocations
            - AWSPartition:
                Ref: AWS::Partition
              AWSRegion:
                Ref: AWS::Region
              AWSAccountId:
                Ref: AWS::AccountId
        type: aws_proxy
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
        timeoutInMillis: 29000
        responses:
          default:
            statusCode: "200"

      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
        allowMethods:
          - POST
        allowHeaders:
          - "Content-Type"
        maxAge: 300

  /core/v1/products:
    get:
      operationId: "GetProducts"
      summary: "La funcionalidad de esta API es obtener los productos ofrecidos por el banco"
      description: "Se envía la comunicación síncrona al microservicio de productos por medio de un orquestador que actúa como capa de integración y redirecciona al microservicio correspondiente"
      responses:
        "200":
          description: "Products available of the bank"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeProductsResponse"

      x-amazon-apigateway-integration:
        httpMethod: POST
        credentials:
          Fn::Sub:
            - arn:aws:iam::${AWSAccountId}:role/ROLE_PRAGMA_ASSESSMENT_API_CLIENTS
            - AWSAccountId:
                Ref: AWS::AccountId
        uri:
          Fn::Sub:
            - arn:${AWSPartition}:apigateway:${AWSRegion}:lambda:path/2015-03-31/functions/arn:${AWSPartition}:lambda:${AWSRegion}:${AWSAccountId}:function:LAMBDA_PRAGMA_ASSESS_API_DESCRIBE_BANK_SERVICES/invocations
            - AWSPartition:
                Ref: AWS::Partition
              AWSRegion:
                Ref: AWS::Region
              AWSAccountId:
                Ref: AWS::AccountId
        type: aws_proxy
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
        timeoutInMillis: 29000
        responses:
          default:
            statusCode: "200"

      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
        allowMethods:
          - POST
        allowHeaders:
          - "Content-Type"
        maxAge: 300
components:
  schemas:
    CreateUserRequest:
      type: object
      properties:
        code:
          type: number
          description: "Identifier of the cliente"
          example: 12345
        name:
          type: string
          description: "First name of the client"
          example: "Alvaro"
        lastName:
          type: string
          description: "Last name of the client"
          example: "Garzón"
        password:
          type: string
          description: "Password of the client"
          example: "Alvaro2345"
    CreateUserResponse:
      type: object
      properties:
        message:
          type: string
          description: "Mensaje de si es exitosa la operación o no"
          example: "User registered successfully"
    FailedCreateUserResponse:
      type: object
      properties:
        message:
          type: string
          description: "Mensaje del error"
          example: "User exists already"

    ModifyUserRequest:
      type: object
      properties:
        code:
          type: number
          description: "Identifier of the cliente"
          example: 12345
        name:
          type: string
          description: "First name of the client"
          example: "Alvaro"
        lastName:
          type: string
          description: "Last name of the client"
          example: "Garzón"
        city:
          type: string
          description: "City of the client"
          example: "Bogotá"
        age:
          type: number
          description: "age of the client"
          example: 26
        country:
          type: string
          description: "country of the client"
          example: "Alvaro2345"
        incomes:
          type: number
          description: "incomes of the client"
          example: 10000000
    ModifyUserResponse:
      type: object
      properties:
        message:
          type: string
          description: "Mensaje de si es exitosa la operación o no"
          example: "User updated successfully"

    DescribeProductsResponse:
      type: object
      properties:
        message:
          type: array
          items:
            type: object
            properties:
              CodeService:
                type: object
                properties:
                  N:
                    type: string
                    description: Object with the datatype and the code of the product
                    example: 1
              NameService:
                type: object
                properties:
                  S:
                    type: string
                    description: Object with the datatype and the name of the product
                    example: "Cuentas de ahorros"
